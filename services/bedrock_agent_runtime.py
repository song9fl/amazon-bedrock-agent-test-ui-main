import boto3
from botocore.exceptions import ClientError
import re

def invoke_agent(agent_id, agent_alias_id, session_id, prompt):
    try:
        # Initialize the client for the Bedrock agent runtime
        client = boto3.session.Session().client(service_name="bedrock-agent-runtime")
        
        # Invoke the agent with provided parameters
        response = client.invoke_agent(
            agentId=agent_id,
            agentAliasId=agent_alias_id,
            enableTrace=True,
            sessionId=session_id,
            inputText=prompt,
        )

        # Use only the 'result' field as the chatbot's main response
        output_text = response.get("result", "").strip()
        citations = []

        # Check if 'result' was properly retrieved and clean up placeholders
        if output_text:
            output_text = re.sub(r'%?\[\d+\]%?', '', output_text).strip()

        # Process completion events to gather citations if they exist
        for event in response.get("completion", []):
            chunk = event.get("chunk")
            if chunk and "attribution" in chunk:
                # Collect citations
                for citation in chunk["attribution"]["citations"]:
                    uri = citation.get("location", {}).get("s3Location", {}).get("uri", "Citation unavailable")
                    if uri not in citations:
                        citations.append(uri)

        # Append formatted citations at the end of output_text if they exist
        if citations:
            citation_texts = "\n\nCitations:\n" + "\n".join([f"[{i+1}] {uri}" for i, uri in enumerate(citations)])
            output_text += citation_texts

        # Default message if output_text is empty
        if not output_text.strip():
            output_text = "No meaningful response was generated by the chatbot."

    except ClientError as e:
        # Handle client errors with a user-friendly message
        output_text = "An error occurred while trying to invoke the agent."
        print(f"ClientError: {e}")

    # Return the structured response
    return {
        "output_text": output_text,  # Main response text with appended citations if any
        "citations": citations,
    }
